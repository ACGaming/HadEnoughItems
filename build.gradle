import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
	repositories {
		mavenLocal()
		maven { url = "https://files.minecraftforge.net/maven" }
		jcenter()
		mavenCentral()
	}
	// This is only here while FG is under active development
	configurations.classpath {
		resolutionStrategy {
			cacheDynamicVersionsFor 10, "seconds"
			cacheChangingModulesFor 0, "seconds"
		}
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
	}
}

plugins {
//	id "com.matthewprenger.cursegradle" version "1.0.9"
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}
apply from: "buildtools/ColoredOutput.gradle"


apply plugin: "net.minecraftforge.gradle"

version = version_major + "." + version_minor + "." + version_patch
group = "mezz.jei" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jei-" + mcversion

if (System.getenv().BUILD_NUMBER != null) {
//adds the build number to the end of the version string if on a build server
	version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
	//	runDir = "run"
	//	replace "@VERSION@", project.version
	mappings channel: "snapshot", version: "20180921-1.13"

	accessTransformer = file('src/main/resources/META-INF/jei_at.cfg')

	runConfig {
		name = "Minecraft Client"
		main = "net.minecraftforge.userdev.UserdevLauncher"
		ideaModuleName = "${project.name}_main"
		workingDirectory = project.file("run").canonicalPath
		environment "target", "fmldevclient"
		environment "assetDirectory", downloadAssets.output.absolutePath
	}

	runConfig {
		name = "Minecraft Server"
		main = "net.minecraftforge.userdev.UserdevLauncher"
		ideaModuleName = "${project.name}_main"
		workingDirectory = project.file("run").canonicalPath
		environment "target", "fmldevserver"
		environment "assetDirectory", downloadAssets.output.absolutePath
	}
}

repositories {

}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

dependencies {
	minecraft([
		group: "net.minecraftforge.test",
		name: "forge",
		version: "${project.mcversion}-${project.forgeversion}"
	])
	testCompile([
		group: "junit",
		name: "junit",
		version: "4.12"
	])
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.mcversion

	// replace stuff in mods.toml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include "META_INF/mods.toml"
		expand "version": project.version
	}

	// copy everything else
	from(sourceSets.main.resources.srcDirs) {
		exclude "META_INF/mods.toml"
	}
}

// prevent java 8's strict doclint for javadocs from failing builds
tasks.withType(Javadoc) {
	options.addStringOption("Xdoclint:none", "-quiet")
}

task makeChangelog(type: GitChangelogTask) {
	filePath = "changelog.html"
	untaggedName = "Current release ${project.version}"
	fromCommit = "2fe051cf727adce1be210a46f778aa8fe031331e"
	toRef = "HEAD"
	templateContent = file("changelog.mustache").getText("UTF-8")
}

//curseforge {
//	apiKey = project.hasProperty("curseforge_apikey") ? project.curseforge_apikey : "0"
//	project {
//		id = curse_project_id
//		changelog = file("changelog.html")
//		changelogType = "html"
//		releaseType = "beta"
//	}
//}

//afterEvaluate {
//	tasks.curseforge238222.dependsOn.add(makeChangelog)
//}

jar {
	from sourceSets.main.output
	from sourceSets.api.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output

	// TODO: when FG bug is fixed, remove allJava from the api jar.
	// https://github.com/MinecraftForge/ForgeGradle/issues/369
	// Gradle should be able to pull them from the -sources jar.
	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

task("uploadJars", dependsOn: "build") {
	description = "uploads JARs"
	if (project.hasProperty("local_maven")) {
		apply plugin: "maven"
		uploadArchives {
			repositories {
				mavenDeployer {
					repository(url: "file://${local_maven}")
				}
			}
		}
	}
}
